#!/bin/bash
#
# © Copyright 2021 Micro Focus or one of its affiliates.
# The only warranties for products and services of Micro Focus and its affiliates and licensors
# (“Micro Focus”) are set forth in the express warranty statements accompanying such products and
# services. Nothing herein should be construed as constituting an additional warranty. Micro Focus
# shall not be liable for technical or editorial errors or omissions contained herein. The informa-
# tion contained herein is subject to change without notice.
#
# Contains Confidential Information. Except as specifically indicated otherwise, a valid license is
# required for possession, use or copying. Consistent with FAR 12.211 and 12.212, Commercial
# Computer Software, Computer Software Documentation, and Technical Data for Commercial Items are
# licensed to the U.S. Government under vendor's standard commercial license.
#

# Global Defaults
common_mount_location="/mnt/efs-mount-point"
declare -A all_services_locations=(["reporting-svc"]="reporting" ["fusion-user-management"]="investigate/mgmt/db" ["fusion-metadata-web-app"]="fusion/theme" ["fusion-dashboard-web-app"]="fusion/widget-store" ["fusion-metadata-rethinkdb"]="investigate/search/rethinkdb")
all_services="false"
older_backup="false"
restore_folder=""
backup_folder=""
declare -A final_mount_locations

confirm() {
    read -r -p "${1:-Are you sure? [y/N]} " response
    case "$response" in
    [yY][eE][sS] | [yY])
        true
        ;;
    *)
        false
        ;;
    esac
}

directory_exists() {
    dir="$@"
    if [ -d $dir ]; then true; else false; fi
}

sync_to_restore_directory() {
    for i in "${!final_mount_locations[@]}"; do
        if $older_backup; then
            backupdir=$common_mount_location/$restore_folder/${final_mount_locations[$i]}/backup/$backup_folder
        else
            backupdir=$(ls -dtr1 $common_mount_location/$restore_folder/${final_mount_locations[$i]}/backup/* | tail -1)
        fi
        sudo rsync -avrHAXS --delete $backupdir/ $common_mount_location/${final_mount_locations[$i]}/restore
    done
    echo "Restore completed successfully for ${!final_mount_locations[@]}"
}

check_services_source_destination() {

    for i in "${!all_services_locations[@]}"; do
        if (directory_exists "$common_mount_location/$restore_folder/${all_services_locations[$i]}/backup") && (directory_exists "$common_mount_location/${all_services_locations[$i]}"); then
            final_mount_locations["$i"]=${all_services_locations[$i]}
        elif (! directory_exists "$common_mount_location/$restore_folder/${all_services_locations[$i]}/backup") && (directory_exists "$common_mount_location/${all_services_locations[$i]}"); then
            if ! confirm "WARNING: Backup could not be found for $i. $i will be skipped from restoration. Do you want to continue? [y/N]"; then
                echo "Exiting"
                exit 1
            fi
        elif (! directory_exists "$common_mount_location/$restore_folder/${all_services_locations[$i]}/backup") && (! directory_exists "$common_mount_location/${all_services_locations[$i]}"); then
            if ! confirm "WARNING: Backup and Mount Path could not be found for $i. $i will be skipped from restoration. Do you want to continue? [y/N]"; then
                echo "Exiting"
                exit 1
            fi
        elif (directory_exists "$common_mount_location/$restore_folder/${all_services_locations[$i]}/backup") && (! directory_exists "$common_mount_location/${all_services_locations[$i]}"); then
            echo "ERROR. Backup exists for $i. But could not find corresponding Mount path. Please make sure $i is deployed atleast once."
            exit 1
        fi
    done

}

choose_backup_folder() {
    declare -A backups

    for i in "${!final_mount_locations[@]}"; do
        for backup in $common_mount_location/$restore_folder/${final_mount_locations[$i]}/backup/*; do
            basebackup=$(basename $backup)
            if [ -n "${backups[$basebackup]}" ]; then
                backups["$basebackup"]=$((backups["$basebackup"] + 1))
            else
                backups["$basebackup"]=1
            fi
        done
    done
    declare -a finalbackups
    j=1
    for i in "${!backups[@]}"; do
        if [ "${backups[$i]}" == "${#final_mount_locations[@]}" ]; then
            finalbackups[j++]="$i"
        fi
    done
    if ((${#finalbackups[@]} == 0)); then
        echo "No synchronized backups found for deployments; Exiting"
        exit 1
    fi

    echo "Performing Restore from older backup"
    echo "There are ${#finalbackups[@]} available backups for the deployments"
    for ((i = 1; i <= ${#finalbackups[@]}; i++)); do
        echo $i">     " "${finalbackups[$i]}"
    done
    echo "Which backup do you want to restore from ?"
    echo -n "> "
    read i
    if (($i < 1)) || (($i > ${#finalbackups[@]})); then
        echo "Invalid index specified; Exiting"
        exit 1
    fi
    echo "You have selected to restore from ${finalbackups[$i]}"
    backup_folder=${finalbackups[$i]}
}

entrypoint() {
    while [ "$1" != "" ]; do
        case $1 in
        -a | --all-services)
            all_services="true"
            ;;
        -o | --older-backup)
            older_backup="true"
            ;;
        -r | --restore-dir)
            shift
            custom_restore_dir="$1"
            ;;
        -h | --help)
            echo "Usage: efs_backup_restore.sh [OPTIONS]"
            echo "OPTION includes:"
            echo "   -a | --all-services - Restore all services of EFS"
            echo "   -o | --older-backup - To restore from available older backups"
            echo "   -r | --restore-dir - Specify custom restore folder"
            echo "   -h | --help - displays this message"
            exit
            ;;
        *)
            echo "Invalid option: $1"
            echo "Usage: efs_backup_restore.sh [-a | --all-services] [-r | --restore-dir <directory_name> ]"
            echo "   -a | --all-services - Restore all services of EFS"
            echo "   -o | --older-backup - To restore from available older backups"
            echo "   -r | --restore-dir - Specify custom restore folder"
            echo "   -h | --help - displays this message"
            exit
            ;;
        esac
        shift
    done

    if [ -n "${custom_restore_dir}" ]; then
        restore_folder=${custom_restore_dir}
        if ! directory_exists "$common_mount_location/$restore_folder"; then
            echo "Specified restore directory does not exist"
            exit 1
        fi
    else
        if directory_exists "$common_mount_location/aws-backup-restore*"; then
            restore_folder=$(basename $(ls -dtr1 $common_mount_location/aws-backup-restore* | tail -1))
        else
            echo "No restore directory found in Mount Location"
            exit 1
        fi
    fi

    check_services_source_destination

    if $older_backup; then
        choose_backup_folder
    fi

    echo "You are about to restore directories of: " "${!final_mount_locations[@]}"

    confirm && sync_to_restore_directory
}

entrypoint "$@"
